{"version":3,"sources":["components/icon.js","App.js","serviceWorker.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","checkIsWinner","i","lSearch","cpuTurns","randomIndex","Math","floor","random","toast","type","getUI","map","item","index","Card","key","color","onClick","itemNumber","setTimeout","changeItem","CardBody","Container","position","Row","Col","md","Button","block","style","margin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77fd2e7e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FaTimes, FaRegCircle } from \"react-icons/fa\";\r\n\r\nfunction Icon({ name }) {\r\n  switch (name) {\r\n    case \"circle\":\r\n      return <FaRegCircle className=\"icon-circle\" />;\r\n    case \"cross\":\r\n      return <FaTimes className=\"icon-cross\" />;\r\n    default:\r\n      return <div></div>;\r\n  }\r\n}\r\n\r\nexport default Icon;\r\n","import React, { useState } from \"react\";\r\nimport Icon from \"./components/icon\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Card, CardBody, Container, Button, Row, Col } from \"reactstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { AiOutlineReload } from \"react-icons/ai\";\r\nimport \"./App.css\";\r\n\r\nconst itemArray = new Array(9).fill(\"empty\");\r\n\r\nconst App = () => {\r\n  const [isCross, setIsCross] = useState(false);\r\n  const [winMessage, setWinMessage] = useState(\"\");\r\n\r\n  const reloadGame = () => {\r\n    setIsCross(false);\r\n    setWinMessage(\"\");\r\n    // setTurns(9);\r\n    itemArray.fill(\"empty\", 0, 9);\r\n  };\r\n\r\n  const lSearch = () => {\r\n    for (let i = 0; i < 9; i++) {\r\n      if (itemArray[i] === \"empty\") {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const checkIsWinner = () => {\r\n    if (winMessage === \"\") {\r\n      if (\r\n        itemArray[0] === itemArray[1] &&\r\n        itemArray[0] === itemArray[2] &&\r\n        itemArray[0] !== \"empty\"\r\n      ) {\r\n        setWinMessage(`${itemArray[0]} wins`);\r\n        return true;\r\n      } else if (\r\n        itemArray[3] !== \"empty\" &&\r\n        itemArray[3] === itemArray[4] &&\r\n        itemArray[3] === itemArray[5]\r\n      ) {\r\n        setWinMessage(`${itemArray[3]} wins`);\r\n        return true;\r\n      } else if (\r\n        itemArray[6] !== \"empty\" &&\r\n        itemArray[6] === itemArray[7] &&\r\n        itemArray[6] === itemArray[8]\r\n      ) {\r\n        setWinMessage(`${itemArray[6]} wins`);\r\n        return true;\r\n      } else if (\r\n        itemArray[0] !== \"empty\" &&\r\n        itemArray[0] === itemArray[3] &&\r\n        itemArray[0] === itemArray[6]\r\n      ) {\r\n        setWinMessage(`${itemArray[0]} wins`);\r\n        return true;\r\n      } else if (\r\n        itemArray[1] !== \"empty\" &&\r\n        itemArray[1] === itemArray[4] &&\r\n        itemArray[1] === itemArray[7]\r\n      ) {\r\n        setWinMessage(`${itemArray[1]} wins`);\r\n        return true;\r\n      } else if (\r\n        itemArray[2] !== \"empty\" &&\r\n        itemArray[2] === itemArray[5] &&\r\n        itemArray[2] === itemArray[8]\r\n      ) {\r\n        setWinMessage(`${itemArray[2]} wins`);\r\n        return true;\r\n      } else if (\r\n        itemArray[0] !== \"empty\" &&\r\n        itemArray[0] === itemArray[4] &&\r\n        itemArray[0] === itemArray[8]\r\n      ) {\r\n        setWinMessage(`${itemArray[0]} wins`);\r\n        return true;\r\n      } else if (\r\n        itemArray[2] !== \"empty\" &&\r\n        itemArray[2] === itemArray[4] &&\r\n        itemArray[2] === itemArray[6]\r\n      ) {\r\n        setWinMessage(`${itemArray[2]} wins`);\r\n        return true;\r\n      } else if (lSearch()) {\r\n        setWinMessage(`Match Tied`);\r\n        return true;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const changeItem = (itemNumber) => {\r\n    if (winMessage) {\r\n      return toast(winMessage, { type: \"info\" });\r\n    }\r\n    if (itemArray[itemNumber] === \"empty\") {\r\n      // setTurns(turns--);\r\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\r\n      // console.log(turns);\r\n      setIsCross(!isCross);\r\n      checkIsWinner();\r\n      if (!checkIsWinner()) {\r\n        setTimeout(() => {\r\n          cpuTurns();\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const getRandom = () => {\r\n    return Math.floor(Math.random() * 9);\r\n  };\r\n\r\n  const cpuTurns = () => {\r\n    // checkUnique();\r\n    let randomIndex = getRandom();\r\n    // let randomIndex = Math.floor(Math.random() * 9);\r\n    if (itemArray[randomIndex] === \"empty\") {\r\n      if (winMessage) {\r\n        return toast(winMessage, { type: \"success\" });\r\n      }\r\n      // setTurns(turns--);\r\n      itemArray[randomIndex] = isCross ? \"circle\" : \"cross\";\r\n      // console.log(turns);\r\n      setIsCross(isCross);\r\n      getUI();\r\n      checkIsWinner();\r\n    } else {\r\n      cpuTurns();\r\n    }\r\n  };\r\n\r\n  const getUI = () => {\r\n    // console.log(isCross ? \"Cross\" : \"Circle\");\r\n    return (\r\n      <div className=\"grid\">\r\n        {itemArray.map((item, index) => (\r\n          <Card key={index} color=\"alert\" onClick={() => changeItem(index)}>\r\n            <CardBody className=\"box\">\r\n              <Icon name={item} />\r\n            </CardBody>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Container className=\"p-5\">\r\n      <h1 className=\"text-center text-white\">Tic Tac Toe</h1>\r\n      <ToastContainer position=\"bottom-center\" />\r\n      <Row>\r\n        <Col md={6} className=\"offset-md-3\">\r\n          {winMessage ? (\r\n            <div className=\"mb-2 mt-2\">\r\n              <h2 className=\"text-success text-center text-uppercase\">\r\n                {winMessage}\r\n              </h2>\r\n              <Button block onClick={reloadGame} color=\"info\">\r\n                <AiOutlineReload style={{ margin: \"0 10px\" }} />\r\n                Reload Game\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              {isCross ? (\r\n                <h2 className=\"mb-5 text-center text-primary\">Cross Turns</h2>\r\n              ) : (\r\n                <h2 className=\"mb-5 text-center text-warning\">Circle Turns</h2>\r\n              )}\r\n            </div>\r\n          )}\r\n          <div>{getUI()}</div>\r\n        </Col>\r\n      </Row>\r\n      <p className=\"mt-5 text-white text-center\">github.com/suhailzone</p>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}